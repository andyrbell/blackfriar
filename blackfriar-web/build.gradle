import com.blackfriar.gradle.Jinja2Task

import java.util.regex.Matcher

buildscript { script ->
    apply from: "${rootDir}/repositories.gradle", to: script

    dependencies {
        classpath 'org.springframework:springloaded:1.2.5.RELEASE'
        classpath 'net.researchgate:gradle-release:2.3.0'
        classpath files("$projectDir/lib/ojdbc6.jar")
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.0.3"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'
apply plugin: 'net.researchgate.release'

apply from: '../gradle/git-metadata.gradle'
apply from: '../gradle/rpm.gradle'

flyway {
    url = 'jdbc:oracle:thin:@localhost:1521:xe'
    user = 'blackfriar'
    password = 'password'
}

dependencies {
    compile project(":blackfriar-services")
    compile project(":blackfriar-common")
    compile project(":blackfriar-ui")
    compile project(":blackfriar-messaging")
    
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'javax.inject:javax.inject:1'
    compile 'com.fasterxml.jackson.core:jackson-annotations'
    compile 'com.fasterxml.jackson.core:jackson-core'
    compile 'com.h2database:h2:1.4.191'
    compile 'org.flywaydb:flyway-core:4.0.3'
    compile 'io.springfox:springfox-swagger2:2.4.0'
    compile files("$projectDir/lib/ojdbc6.jar")

    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'
    compile 'org.springframework.boot:spring-boot-starter-mustache'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.security:spring-security-ldap'


    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.jayway.jsonpath:json-path:'
    testCompile project(path : ':blackfriar-common', configuration: 'testLib')
}

bootRun {
    addResources = true
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}

//task processLocalApplicationYaml(type: Jinja2Task) {
//    from file("ansibledir/roles/blackfriar/templates/application.yml.j2")
//    into "$project.buildDir/generated-config"
//    bindingsFiles files("ansibledir/group_vars/local", "ansibledir/roles/blackfriar/defaults/main.yml")
//}

publishing {
    repositories {
        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
                url 'http://nexus/content/repositories/snapshots'
            } else {
                url 'http://nexus/content/repositories/releases'
            }
            credentials {
                println nexusUsername
                println nexusPassword
                username findProperty('nexusUsername')
                password findProperty('nexusPassword')
            }
        }
    }
    publications {
        web(MavenPublication) {
            artifact buildRpm
            //todo javadoc
            groupId 'com.blackfriar'
//            artifact packageJavadoc {
//                classifier 'javadoc'
//            }
            //todo: sources
        }
    }
}

//increments the minor version
def releaseVersionPatterns = [
        /(d+)\.(\d+)\.(\d+).*$/: { Matcher m, Project p ->
            m.replaceAll("${m[0][1]}.${(m[0][2] as int) + 1}.${m[0][3]}")
        }
]

//increments the patch version
def fixOnFailVersionPatterns = [
        /(d+)\.(\d+)\.(\d+).*$/: { Matcher m, Project p ->
            m.replaceAll("${m[0][1]}.${m[0][2]}.${(m[0][3] as int) + 1 }")
        }
]

release {
    failOnCommitNeeded = true
    failOnSnapshotDependencies = false
    failOnPublishNeeded = true
    versionPropertyFile = "${rootDir}/gradle.properties"
    buildTasks = ['build']
    git {
        requireBranch = 'master|release/.*'
        pushToRemote = 'origin'
    }
}
afterReleaseBuild.dependsOn publish


//Checks the brach is 'release' and increments the patch version
//Already released at x.y.0, so this creates x.y.1 which
//then makes the release plugin behave as normal
task initializeFixOnFailVersion {
    outputs.upToDateWhen { false }
    if (project.ext.branch.startsWith('release') && project.version.endsWith('.0')) {
        dependsOn createScmAdapter, initScmAdapter, updaterVersion, commitNewVersion
        initScmAdapter.mustRunAfter createScmAdapter
        updateVersion.mustRunAfter initScmAdapter
        commitNewVersion.mustRunAfter updateVersion
    }
    dependsOn gitMetadata
}





